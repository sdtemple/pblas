z[alpha] = z[alpha] + sum(chiphi[-alpha])
}
# line eight
z = log(sum(exp(z)))
a = sum(log(gamma / delta))
# negative log likelihood
return(-(a+z))
}
system.time(print(pbla_general(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
#' Standard PBLA (Exponential)
#'
#' Compute pair-based likelihood approximation. Assume exponential infectious periods.
#'
#' @param r numeric vector of removal times
#' @param beta matrix of rates
#' @param gamma numeric vector of rates
#' @param lag numeric fixed lag
#'
#' @return negative log likelihood
#'
#' @export
pbla_exp2 = function(r, beta, gamma, lag){
# initialize
n = length(r)
N = nrow(beta)
r1 = r[1]
B = apply(beta[1:n,(n+1):N], 1, sum)
delta = gamma + B
ia = rep(-log(n), n)
ip = - gamma * (r - r1)
z = ia + ip
chiphi = rep(0, n)
for(alpha in 1:n){
for(j in (1:n)[-alpha]){
for(k in (1:n)[-c(alpha,j)]){
# lemma 1
deltaj = delta[j]
deltak = delta[k]
denom = (deltaj + deltak) * (beta[j,k] + deltak)
if(r[j] < r[k]){
w = deltaj / denom  * exp(- deltak * (r[k] - (r[j] - lag)))
x = deltak * w
y = 1 - beta[j,k] * w
} else{
w = deltak / denom * exp(- deltaj * ((rj - lag) - rk))
x = deltaj * w
y = deltak / (beta[j,k] + deltak) + beta[j,k] * w
}
# line twelve
X = X + beta[j,k] * x / y
Y = Y + log(y)
}
chiphi[j] = Y + log(X)
}
z[alpha] = z[alpha] + sum(chiphi[-alpha])
}
# line eight
z = log(sum(exp(z)))
a = sum(log(gamma / delta))
# negative log likelihood
return(-(a+z))
}
system.time(print(pbla_general(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
#'
#' @param fcn function for a PBLA approximation
#' @param x numeric vector, including beta and theta parameters
#' @param rs numeric vector of removal times
#' @param N integer population size
#' @param etc list of other parameters to pass
#'
#' @return negative log likelihood
#'
#' @export
pbla_general2 = function(fcn, x, r, N, etc){
beta = matrix(x[1] / N, nrow = N, ncol = N)
gamma = rep(x[2], length(r))
return(do.call(fcn, c(list(r=r, beta=beta, gamma=gamma), etc)))
}
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
#' Standard PBLA (Exponential)
#'
#' Compute pair-based likelihood approximation. Assume exponential infectious periods.
#'
#' @param r numeric vector of removal times
#' @param beta matrix of rates
#' @param gamma numeric vector of rates
#' @param lag numeric fixed lag
#'
#' @return negative log likelihood
#'
#' @export
pbla_exp2 = function(r, beta, gamma, lag){
# initialize
n = length(r)
N = nrow(beta)
r1 = r[1]
B = apply(beta[1:n,(n+1):N], 1, sum)
delta = gamma + B
ia = rep(-log(n), n)
ip = - gamma * (r - r1)
z = ia + ip
chiphi = rep(0, n)
for(alpha in 1:n){
for(j in (1:n)[-alpha]){
X = 0
Y = 0
for(k in (1:n)[-c(alpha,j)]){
# lemma 1
deltaj = delta[j]
deltak = delta[k]
denom = (deltaj + deltak) * (beta[j,k] + deltak)
if(r[j] < r[k]){
w = deltaj / denom  * exp(- deltak * (r[k] - (r[j] - lag)))
x = deltak * w
y = 1 - beta[j,k] * w
} else{
w = deltak / denom * exp(- deltaj * ((rj - lag) - rk))
x = deltaj * w
y = deltak / (beta[j,k] + deltak) + beta[j,k] * w
}
# line twelve
X = X + beta[j,k] * x / y
Y = Y + log(y)
}
chiphi[j] = Y + log(X)
}
z[alpha] = z[alpha] + sum(chiphi[-alpha])
}
# line eight
z = log(sum(exp(z)))
a = sum(log(gamma / delta))
# negative log likelihood
return(-(a+z))
}
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
#' Standard PBLA (Exponential)
#'
#' Compute pair-based likelihood approximation. Assume exponential infectious periods.
#'
#' @param r numeric vector of removal times
#' @param beta matrix of rates
#' @param gamma numeric vector of rates
#' @param lag numeric fixed lag
#'
#' @return negative log likelihood
#'
#' @export
pbla_exp2 = function(r, beta, gamma, lag){
# initialize
n = length(r)
N = nrow(beta)
r1 = r[1]
B = apply(beta[1:n,(n+1):N], 1, sum)
delta = gamma + B
ia = rep(-log(n), n)
ip = - gamma * (r - r1)
z = ia + ip
chiphi = rep(0, n)
for(alpha in 1:n){
for(j in (1:n)[-alpha]){
X = 0
Y = 0
for(k in (1:n)[-c(alpha,j)]){
# lemma 1
deltaj = delta[j]
deltak = delta[k]
denom = (deltaj + deltak) * (beta[j,k] + deltak)
if(r[j] < r[k]){
w = deltaj / denom  * exp(- deltak * (r[k] - (r[j] - lag)))
x = deltak * w
y = 1 - beta[j,k] * w
} else{
w = deltak / denom * exp(- deltaj * ((r[j] - lag) - r[k]))
x = deltaj * w
y = deltak / (beta[j,k] + deltak) + beta[j,k] * w
}
# line twelve
X = X + beta[j,k] * x / y
Y = Y + log(y)
}
chiphi[j] = Y + log(X)
}
z[alpha] = z[alpha] + sum(chiphi[-alpha])
}
# line eight
z = log(sum(exp(z)))
a = sum(log(gamma / delta))
# negative log likelihood
return(-(a+z))
}
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general(pbla_exp, c(2, 1), rs, 200, list(lag=0))))
#' Standard PBLA (Exponential)
#'
#' Compute pair-based likelihood approximation. Assume exponential infectious periods.
#'
#' @param rs numeric vector of removal times
#' @param betas matrix of rates
#' @param gammas numeric vector of rates
#' @param lag numeric fixed lag
#'
#' @return negative log likelihood
#'
#' @export
pbla_exp = function(rs, betas, gammas, lag){
# see page 10 of paper
lemma_1a = function(betakj, deltaj, deltak, rj, rk, lag){
if(rj < rk){
return(1 - betakj * deltaj /
(deltaj + deltak) /
(betakj + deltak) *
exp(- deltak * (rk - (rj - lag))))
} else if(rj > rk){
return(deltak / (betakj + deltak) +
betakj * deltak /
(deltaj + deltak) /
(betakj + deltak) *
exp(- deltaj * ((rj - lag) - rk)))
} else{
print("rj = rk") # delete
}
}
# see page 10 of paper
lemma_1b = function(betakj, deltaj, deltak, rj, rk, lag){
if(rj < rk){
return(deltaj * deltak /
(deltaj + deltak) /
(betakj + deltak) *
exp(- deltak * (rk - (rj - lag))))
} else if(rj > rk){
return(deltaj * deltak /
(deltaj + deltak) /
(betakj + deltak) *
exp(- deltaj * ((rj - lag) - rk)))
} else{
print("rj = rk") # delete
}
}
# see page 7 of paper
line_twelve = function(betakjs, deltaj, deltaks, rj, rks, lag){
K = length(betakjs)
x = 0
for(k in 1:K){
x = x + betakjs[k] *
lemma_1b(betakjs[k], deltaj, deltaks[k], rj, rks[k], lag) /
lemma_1a(betakjs[k], deltaj, deltaks[k], rj, rks[k], lag)
}
x = log(x)
y = 0
for(k in 1:K){
# avoid underflow
y = y +
log(lemma_1a(betakjs[k], deltaj, deltaks[k], rj, rks[k], lag))
}
# return in log scale
return(x + y)
}
# initialize
n = length(rs)
N = nrow(betas)
r1 = rs[1]
lags = rep(lag, n)
Bs = apply(betas[1:n,(n+1):N], 1, sum)
deltas = gammas + Bs
# compute likelihood (line 6 on page 5 of paper)
ia = rep(log(1 / n), n)
ip = - gammas * (rs - r1)
z = ia + ip
for(alpha in 1:n){
for(j in (1:n)[-alpha]){
# avoid underflow
z[alpha] = z[alpha] +
line_twelve(betas[j,1:n][-c(alpha,j)], deltas[j], deltas[-c(alpha,j)], rs[j], rs[-c(alpha,j)], lags[j])
}
}
z = log(sum(exp(z)))
a = sum(log(gammas / deltas))
# negative log likelihood
return(-(a+z))
}
system.time(print(pbla_general(pbla_exp, c(2, 1), rs, 200, list(lag=0))))
#' Standard PBLA (Exponential)
#'
#' Compute pair-based likelihood approximation. Assume exponential infectious periods.
#'
#' @param r numeric vector of removal times
#' @param beta matrix of rates
#' @param gamma numeric vector of rates
#' @param lag numeric fixed lag
#'
#' @return negative log likelihood
#'
#' @export
pbla_exp2 = function(r, beta, gamma, lag){
# initialize
n = length(r)
N = nrow(beta)
r1 = r[1]
B = apply(beta[1:n,(n+1):N], 1, sum)
delta = gamma + B
ia = rep(-log(n), n)
ip = - gamma * (r - r1)
z = ia + ip
chiphi = rep(0, n)
for(alpha in 1:n){
for(j in (1:n)[-alpha]){
X = 0
Y = 0
for(k in (1:n)[-c(alpha,j)]){
# lemma 1
b = beta[j,k]
deltaj = delta[j]
deltak = delta[k]
denom = (deltaj + deltak) * (b + deltak)
if(r[j] < r[k]){
w = deltaj / denom  * exp(- deltak * (r[k] - (r[j] - lag)))
x = deltak * w
y = 1 - b * w
} else{
w = deltak / denom * exp(- deltaj * ((r[j] - lag) - r[k]))
x = deltaj * w
y = deltak / (b + deltak) + b * w
}
# line twelve
X = X + b * x / y
Y = Y + log(y)
}
chiphi[j] = Y + log(X)
}
z[alpha] = z[alpha] + sum(chiphi[-alpha])
}
# line eight
z = log(sum(exp(z)))
a = sum(log(gamma / delta))
# negative log likelihood
return(-(a+z))
}
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
summaryRprof()
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general(pbla_exp, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general(pbla_exp, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
#' Standard PBLA (Exponential)
#'
#' Compute pair-based likelihood approximation. Assume exponential infectious periods.
#'
#' @param r numeric vector of removal times
#' @param beta matrix of rates
#' @param gamma numeric vector of rates
#' @param lag numeric fixed lag
#'
#' @return negative log likelihood
#'
#' @export
pbla_exp2 = function(r, beta, gamma, lag){
# initialize
n = length(r)
N = nrow(beta)
r1 = r[1]
B = apply(beta[1:n,(n+1):N], 1, sum)
delta = gamma + B
ia = rep(-log(n), n)
ip = - gamma * (r - r1)
z = ia + ip
chiphi = rep(0, n)
for(alpha in 1:n){
for(j in (1:n)[-alpha]){
X = 0
Y = 0
rj= r[j]
deltaj = delta[j]
for(k in (1:n)[-c(alpha,j)]){
# lemma 1
b = beta[j,k]
rk = r[k]
deltak = delta[k]
denom = (deltaj + deltak) * (b + deltak)
if(rj < rk){
w = deltaj / denom  * exp(- deltak * (rj - (rk - lag)))
x = deltak * w
y = 1 - b * w
} else{
w = deltak / denom * exp(- deltaj * ((rj - lag) - rk))
x = deltaj * w
y = deltak / (b + deltak) + b * w
}
# line twelve
X = X + b * x / y
Y = Y + log(y)
}
chiphi[j] = Y + log(X)
}
z[alpha] = z[alpha] + sum(chiphi[-alpha])
}
# line eight
z = log(sum(exp(z)))
a = sum(log(gamma / delta))
# negative log likelihood
return(-(a+z))
}
#'
#' @param fcn function for a PBLA approximation
#' @param x numeric vector, including beta and theta parameters
#' @param rs numeric vector of removal times
#' @param N integer population size
#' @param etc list of other parameters to pass
#'
#' @return negative log likelihood
#'
#' @export
pbla_general2 = function(fcn, x, r, N, etc){
beta = matrix(x[1] / N, nrow = N, ncol = N)
gamma = rep(x[2], length(r))
return(do.call(fcn, c(list(r=r, beta=beta, gamma=gamma), etc)))
}
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
warnings()
#' Standard PBLA (Exponential)
#'
#' Compute pair-based likelihood approximation. Assume exponential infectious periods.
#'
#' @param r numeric vector of removal times
#' @param beta matrix of rates
#' @param gamma numeric vector of rates
#' @param lag numeric fixed lag
#'
#' @return negative log likelihood
#'
#' @export
pbla_exp2 = function(r, beta, gamma, lag){
# initialize
n = length(r)
N = nrow(beta)
r1 = r[1]
B = apply(beta[1:n,(n+1):N], 1, sum)
delta = gamma + B
ia = rep(-log(n), n)
ip = - gamma * (r - r1)
z = ia + ip
chiphi = rep(0, n)
for(alpha in 1:n){
for(j in (1:n)[-alpha]){
X = 0
Y = 0
rj= r[j]
deltaj = delta[j]
for(k in (1:n)[-c(alpha,j)]){
# lemma 1
b = beta[j,k]
rk = r[k]
deltak = delta[k]
denom = (deltaj + deltak) * (b + deltak)
if(rj < rk){
w = deltaj / denom  * exp(- deltak * (rk - (rj - lag)))
x = deltak * w
y = 1 - b * w
} else{
w = deltak / denom * exp(- deltaj * ((rj - lag) - rk))
x = deltaj * w
y = deltak / (b + deltak) + b * w
}
# line twelve
X = X + b * x / y
Y = Y + log(y)
}
chiphi[j] = Y + log(X)
}
z[alpha] = z[alpha] + sum(chiphi[-alpha])
}
# line eight
z = log(sum(exp(z)))
a = sum(log(gamma / delta))
# negative log likelihood
return(-(a+z))
}
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general(pbla_exp, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general(pbla_exp, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general(pbla_exp, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general(pbla_exp, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general(pbla_exp, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general(pbla_exp, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(pbla_general2(pbla_exp2, c(2, 1), rs, 200, list(lag=0))))
system.time(print(nlm(pbla_general2, c(2, 1), fcn = pbla_exp2, r = r, N = 200, etc = 0)$estimate))
system.time(print(nlm(pbla_general2, c(2, 1), fcn = pbla_exp2, r = rs, N = 200, etc = 0)$estimate))
warnings()
system.time(print(nlm(pbla_general2, c(1.2, 1), fcn = pbla_exp2, r = rs, N = 200, etc = 0)$estimate))
system.time(print(nlm(pbla_general, c(2, 1), fcn = pbla_prod, rs = rs, N = 100, lag = 0)$estimate))
system.time(print(nlm(pbla_general, c(2, 1), fcn = pbla_prod, rs = rs, N = 200, etc = 0)$estimate))
system.time(print(nlm(pbla_general, c(2, 1), fcn = pbla_exp, rs = rs, N = 200, etc = 0)$estimate))
1000 * .26
3.39 * 1000
3390 / 60
260 / 60
getwd()
setwd("~/UW/Student/STAT572/code/pblas")
library(devtools)
devtools::document()
devtools::install()
